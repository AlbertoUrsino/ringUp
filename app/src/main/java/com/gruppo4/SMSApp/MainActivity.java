package com.gruppo4.SMSApp;

/**
 *@author Francesco Bau'
 */

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.gruppo4.audioUtility.AudioUtilityManager;


public class MainActivity extends AppCompatActivity {

    private static final int TEST_ZERO = 0;
    private static final int TEST_ONE = 1;
    private static final int TEST_TWO = 2;

    private static final int DEFAULT_APP_VOLUME = 50;

    // 5 seconds as default time to wait
    private static final int DEFAULT_WAIT_TIME = 5000;
    private static final int ONE_SECOND = 1000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        // TESTING the method getCurrentRingtoneVolume(Context).
        TestQueue test0 = new TestQueue(TEST_ZERO);
        test0.start();

        try {
            // Wait upon test is completed
            test0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // Toast request denied by Handler
        Toast.makeText(this, test0.getMessage(), Toast.LENGTH_SHORT).show();

        // TESTING the method setMaxRingtoneVolume(Context).
        TestQueue test1 = new TestQueue(TEST_ONE);
        test1.start();
        try {
            // Wait upon test is completed
            test1.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // Toast request denied by Handler
        Toast.makeText(this, test1.getMessage(), Toast.LENGTH_SHORT).show();

        // TESTING the method setMinRingtoneVolume(Context).
        TestQueue test2 = new TestQueue(TEST_TWO);
        test2.start();
        try {
            // Wait upon test is completed
            test2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Printing all Toasts AFTER Threads are completed
        Toast.makeText(this, test0.getMessage(), Toast.LENGTH_SHORT).show();
        Toast.makeText(this, test1.getMessage(), Toast.LENGTH_SHORT).show();
        Toast.makeText(this, test2.getMessage(), Toast.LENGTH_SHORT).show();



    }

    /**
     * This class extends Thread. It was made to bypass the issue generated by Thread.sleep(long),
     * which creates conflicts with Toast (exception thrown in Handler class).
     */
    private class TestQueue extends Thread{
        private String tag,message;
        private int code;

        /**
         *
         * @param code The Test code, which determines which operations is gonna make, and which message is gonna save
         */
        public TestQueue(int code){
            setFred(code);
        }

        /**
         *
         * @param code (See constructor.)
         *
         */
        private void setFred(int code) {
            this.code = code;
            this.tag = "[Test"+code+"]";
        }
        public String getTag(){
            return this.tag;
        }
        public String getMessage(){
            return this.message;
        }
        public int getCode(){
            return this.code;
        }

        /**
         * This method, depending by the code, will do the requested operations:
         * - set the volume
         * - save the relative message
         * @throws IllegalArgumentException if Test code is not valid.
         */
        @Override
        public void run() throws IllegalArgumentException{
            super.run();
            int time = DEFAULT_WAIT_TIME;
            Log.d(getTag(),"WAITING "+time/ONE_SECOND+" SECONDS...");
            try {
                Thread.sleep(time);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            Log.d(getTag(),"RESUMING...");
            // Depending by the Test code, do the right commands, and save the related message
            switch (code){
                case TEST_ZERO:{
                    // Sets up the volume at default percentage.
                    AudioUtilityManager.setRingtoneVolume(MainActivity.this, DEFAULT_APP_VOLUME);
                    int currentVolume = AudioUtilityManager.getCurrentRingtoneVolume(MainActivity.this);
                    message = "DEFAULT RINGTONE VOLUME: "+currentVolume+" %.";
                    break;
                }
                case TEST_ONE:{
                    AudioUtilityManager.setMaxRingtoneVolume(MainActivity.this);
                    int maxVolume = AudioUtilityManager.getCurrentRingtoneVolume(MainActivity.this);
                    message = "MAXIMUM RINGTONE VOLUME: "+maxVolume+" %.";
                    break;
                }
                case TEST_TWO:{
                    AudioUtilityManager.setMinRingtoneVolume(MainActivity.this);
                    int minVolume = AudioUtilityManager.getCurrentRingtoneVolume(MainActivity.this);
                    message = "MINIMUM RINGTONE VOLUME: "+minVolume+" %.";
                    break;
                }
                default:{
                    throw new IllegalArgumentException(" ERROR. The entered code is NOT valid. Please retry with a valid code.");
                }
            }
            Log.d(getTag(),getMessage());
        }
    }
}
//TODO TESTING
//TODO DELETE "TestQueue" CLASS, SWITCHING FROM SEQUENTIAL TESTS INTO BUTTON-TYPE TEST.
